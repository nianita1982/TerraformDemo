name: CI/CD Node App to AKS

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: node-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to ACR
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AKS_RG }}
        cluster-name: ${{ secrets.AKS_NAME }}

    - name: Add CSI DRIVER Helm repo (base layer)
      run: |
        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
        helm repo update

    - name: Install CSI DRIVER (core)
      run: |
        helm upgrade --install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
          --namespace kube-system \
          --set syncSecret.enabled=true


    - name: Deploy to AKS
      run: |
        sed "s|REPLACE_ME|${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" app.yaml > app.generated.yaml
        kubectl apply -f app.generated.yaml

    - name: Provide Permission to AKS to pull from ACR
      run: |
        az aks update --name aks-demo-cluster --resource-group RG-Terraform-Demo --attach-acr myacrterraformdemo

    - name: Uninstall old provider (optional)
      run: |
        set +e  # desactiva la detenci√≥n autom√°tica por errores

        # Verifica si el release existe y est√° en estado v√°lido
        helm status csi-secrets-store-provider-azure -n kube-system > /dev/null 2>&1
        STATUS_RESULT=$?

        if [ $STATUS_RESULT -eq 0 ]; then
          echo "Previous release found. Uninstalling..."
          helm uninstall csi-secrets-store-provider-azure -n kube-system
          UNINSTALL_RESULT=$?
          if [ $UNINSTALL_RESULT -ne 0 ]; then
            echo "‚ö†Ô∏è Warning: Uninstall command failed, but continuing anyway..."
          fi
        else
          echo "No previous release found or already deleted."
        fi

        set -e  # reactiva el fallo autom√°tico

    - name: Force delete CSIDriver if it exists (avoid Helm conflict)
      run: |
        kubectl delete csidriver secrets-store.csi.k8s.io --ignore-not-found


    - name: Add CSI driver Helm repo
      run: |
        helm repo add csi-azure https://azure.github.io/secrets-store-csi-driver-provider-azure/charts
        helm repo update

    - name: Install/Upgrade CSI Secrets Store Driver (Kubernetes CSI layer)
      run: |
        helm upgrade --install csi-secrets-store csi-azure/csi-secrets-store-provider-azure \
          --namespace kube-system \
          --set secrets-store.csi.k8s.io.syncSecret.enabled=true

    - name: Ensure CSI Key Vault Secrets Provider addon is enabled
      run: |
        if ! az aks show \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \a
            --query "addonProfiles.azureKeyvaultSecretsProvider.enabled" \
            --output tsv | grep -q true; then

          echo "üîß Enabling azure-keyvault-secrets-provider addon..."
          az aks enable-addons \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_NAME }} \
            --addons azure-keyvault-secrets-provider \
            --enable-secret-rotation
        else
          echo "‚úÖ Addon already enabled. Skipping..."
        fi

    - name: Apply SecretProviderClass
      run: |
        kubectl delete secretproviderclass azure-kv-secrets --ignore-not-found
        kubectl apply -f secret-provider.yaml
        kubectl delete pod -l app=node